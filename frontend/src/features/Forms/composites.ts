import hexObjectId from 'hex-object-id'
import startCase from 'lodash/startCase'
import omit from 'lodash/omit'
import {
  QBtn,
  QBtnToggle,
  QCheckbox,
  QChip, QCircularProgress,
  QIcon, QImg,
  QInput, QKnob,
  QOptionGroup,
  QRange, QRating,
  QSelect, QSeparator, QSkeleton,
  QSlider, QSpace, QSpinnerIos,
  QToggle, QVideo,
} from 'quasar'
import {
  TObject, Type, StringEnum, TSchema,
} from '@feathersjs/typebox'
import { TFormComponent, TFormField } from '@/shared/interfaces/forms'
import { defaultValueForSchema } from '@/shared/schema'
import { AnyData } from '@/shared/interfaces/commons'
import { contentIcon, modelIcon, styleIcon } from '@/shared/icons'
import DateField from '@/features/Fields/components/DateField.vue'
import TimeField from '@/features/Fields/components/TimeField.vue'
import ColorField from '@/features/Fields/components/ColorField.vue'
import IconField from '@/features/Fields/components/IconField.vue'
import SchemaTable from '@/features/Fields/components/SchemaTable.vue'
import LabelField from '@/features/Fields/components/LabelField.vue'
import Editor from '@/features/Fields/components/Editor.vue'
import FormElementRow from './components/Editor/FormElementRow.vue'

const sizeString = Type.String({
  options: [
    { value: 'xs', icon: 'mdi-size-xs' },
    { value: 'sm', icon: 'mdi-size-s' },
    { value: 'md', icon: 'mdi-size-m' },
    { value: 'lg', icon: 'mdi-size-l' },
    { value: 'xl', icon: 'mdi-size-xl' },
  ],
  toggles: true,
  clearable: true,
})

export const commonProperties = {
  name: Type.Object({
    name: Type.String(),
  }),

  state: Type.Object({
    disable: Type.Boolean(),
    readonly: Type.Boolean(),
  }),

  style: Type.Object({
    dense: Type.Boolean(),
    padding: Type.Object({
      top: Type.String(),
      left: Type.String(),
      bottom: Type.String(),
      right: Type.String(),
    }, { style: true, padding: true }),
    margin: Type.Object({
      top: Type.String(),
      left: Type.String(),
      bottom: Type.String(),
      right: Type.String(),
    }, { style: true, margin: true }),
  }),

  size: Type.Object({
    size: sizeString,
  }),
}

const componentForType = {
  text: QInput,
  number: QInput,
  checkbox: QCheckbox,
  toggle: QToggle,
  button: QBtn,
  buttonToggle: QBtnToggle,
  optionGroup: QOptionGroup,
  select: QSelect,
  chip: QChip,
  date: DateField,
  time: TimeField,
  color: ColorField,
  iconSelect: IconField,
  row: FormElementRow,
  slider: QSlider,
  range: QRange,
  icon: QIcon,
  img: QImg,
  knob: QKnob,
  progress: QCircularProgress,
  rating: QRating,
  separator: QSeparator,
  skeleton: QSkeleton,
  space: QSpace,
  spinner: QSpinnerIos,
  video: QVideo,
  table: SchemaTable,
  label: LabelField,
  paragraph: Editor,
}

export const properties = (props: TObject[]) => Type.Intersect(
  [
    commonProperties.name,
    ...props,
  ],
)

const components = [
  {
    type: 'label',
    icon: 'mdi-format-color-text',
    label: 'Label',
    schema: properties([
      commonProperties.state,
      Type.Object({
        modelValue: Type.String(),
        format: Type.String({
          options: [
            { value: 'overline', icon: 'mdi-format-overline' },
            { value: 'title', icon: 'mdi-format-title' },
            { value: 'subtitle', icon: 'mdi-subtitles' },
            { value: 'caption', icon: 'mdi-closed-caption' },
          ],
          toggles: true,
          clearable: true,
        }),
        heading: Type.String({
          options: [
            { value: 'h1', icon: 'mdi-format-header-1' },
            { value: 'h2', icon: 'mdi-format-header-2' },
            { value: 'h3', icon: 'mdi-format-header-3' },
            { value: 'h4', icon: 'mdi-format-header-4' },
            { value: 'h5', icon: 'mdi-format-header-5' },
            { value: 'h6', icon: 'mdi-format-header-6' },
          ],
          toggles: true,
          clearable: true,
        }),
        styling: Type.String({
          options: [
            { value: 'bold', icon: 'mdi-format-bold' },
            { value: 'italic', icon: 'mdi-format-italic' },
            { value: 'strike', icon: 'mdi-format-strikethrough' },
          ],
          toggles: true,
          clearable: true,
        }),
        casing: Type.String({
          options: [
            { value: 'uppercase', icon: 'mdi-format-letter-case-upper' },
            { value: 'lowercase', icon: 'mdi-format-letter-case-lower' },
            { value: 'capitalize', icon: 'mdi-format-letter-case' },
          ],
          toggles: true,
          clearable: true,
        }),
      }),
      Type.Omit(commonProperties.style, ['dense']),
    ]),
    categories: {
      content: {
        icon: contentIcon,
        names: [
          'modelValue',
        ],
      },
      style: {
        icon: styleIcon,
        names: [
          'format',
          'heading',
          'styling',
          'casing',
          'padding',
          'margin',
        ],
      },
    },
  },
  {
    type: 'row',
    icon: 'mdi-view-column-outline',
    label: 'Row',
    nokey: true,
    schema: properties([
      Type.Omit(commonProperties.style, ['dense']),
    ]),
    categories: {
      style: {
        icon: styleIcon,
        names: [
          'padding',
          'margin',
        ],
      },
    },
  },
  {
    type: 'col',
    icon: 'mdi-table-column',
    label: 'Column',
    nokey: true,
    hidden: true,
    schema: properties([
      Type.Object({
        col: Type.String({
          options: [
            { label: '1', value: '1' },
            { label: '2', value: '2' },
            { label: '3', value: '3' },
            { label: '4', value: '4' },
            { label: '5', value: '5' },
            { label: '6', value: '6' },
            { label: '7', value: '7' },
            { label: '8', value: '8' },
            { label: '9', value: '9' },
            { label: '10', value: '10' },
            { label: '11', value: '11' },
            { label: '12', value: '12' },
            { label: 'A', value: 'auto' },
          ],
          toggles: true,
          clearable: true,
        }),
      }),
      Type.Omit(commonProperties.style, ['dense']),
    ]),
    categories: {
      content: {
        icon: contentIcon,
        names: [
          'col',
        ],
      },
      style: {
        icon: styleIcon,
        names: [
          'padding',
          'margin',
        ],
      },
    },
  },
  {
    type: 'text',
    icon: 'mdi-form-textbox',
    label: 'Text',
    schema: properties([
      commonProperties.state,
      Type.Object({
        modelValue: Type.Union([Type.String(), Type.Null(), Type.Undefined()]),
        mask: Type.String(),
        fillMask: Type.String(),
        unmaskedValue: Type.Boolean(),
        label: Type.String(),
        labelColor: Type.String({ color: true }),
        stackLabel: Type.Boolean(),
        hint: Type.String(),
        hideHint: Type.Boolean(),
        prefix: Type.String(),
        suffix: Type.String(),
        clearable: Type.Boolean(),
        loading: Type.Boolean(),
        counter: Type.Boolean(),
        autogrow: Type.Boolean(),
        filled: Type.Boolean(),
        outlined: Type.Boolean(),
        square: Type.Boolean(),
        borderless: Type.Boolean(),
        standout: Type.Boolean(),
        rounded: Type.Boolean(),
        itemAligned: Type.Boolean(),
        type: StringEnum([
          'text',
          'password',
          'area',
          'email',
          'search',
          'file',
          'number',
          'url',
          'time',
          'date',
        ]),
        maxLength: Type.Number(),
        color: Type.String({ color: true }),
        bgColor: Type.String({ color: true }),
        hideBottomSpace: Type.Boolean(),
      }),
      commonProperties.style,
    ]),
    defaultValues: {
      type: 'text',
      dense: true,
      outlined: true,
    },
    categories: {
      content: {
        icon: contentIcon,
        names: [
          'name',
          'disable',
          'readonly',
          'label',
          'hint',
          'prefix',
          'suffix',
          'loading',
          'counter',
        ],
      },
      model: {
        icon: modelIcon,
        names: [
          'type',
          'modelValue',
          'clearable',
          'mask',
          'fillMask',
          'unmaskedValue',
          'maxLength',
        ],
      },
      style: {
        icon: styleIcon,
        names: [
          'dense',
          'color',
          'bgColor',
          'labelColor',
          'stackLabel',
          'hideBottomSpace',
          'itemAligned',
          'hideHint',
          'autogrow',
          'filled',
          'outlined',
          'square',
          'borderless',
          'standout',
          'rounded',
          'padding',
          'margin',
        ],
      },
    },
  },
  {
    type: 'checkbox',
    icon: 'mdi-check',
    label: 'Checkbox',
    schema: properties([
      commonProperties.state,
      Type.Object({
        modelValue: Type.Boolean(),
        label: Type.String(),
        leftLabel: Type.Boolean(),
        color: Type.String({ color: true }),
        keepColor: Type.Boolean(),
        checkedIcon: Type.String({ icon: true }),
        uncheckedIcon: Type.String({ icon: true }),
      }),
      commonProperties.style,
    ]),
    defaultValues: {
    },
    categories: {
      content: {
        icon: contentIcon,
        names: [
          'name',
          'modelValue',
          'disable',
          'readonly',
          'label',
          'leftLabel',
          'checkedIcon',
          'uncheckedIcon',
        ],
      },
      style: {
        icon: styleIcon,
        names: [
          'dense',
          'color',
          'keepColor',
          'padding',
          'margin',
        ],
      },
    },
  },
  {
    type: 'toggle',
    icon: 'mdi-toggle-switch-off-outline',
    label: 'Toggle',
    schema: properties([
      commonProperties.state,
      commonProperties.size,
      Type.Object({
        modelValue: Type.Boolean(),
        label: Type.String(),
        leftLabel: Type.Boolean(),
        color: Type.String({ color: true }),
        iconColor: Type.String({ color: true }),
        keepColor: Type.Boolean(),
      }),
      commonProperties.style,
    ]),
    defaultValues: {
    },
    categories: {
      content: {
        icon: contentIcon,
        names: [
          'name',
          'modelValue',
          'disable',
          'readonly',
          'label',
          'leftLabel',
        ],
      },
      style: {
        icon: styleIcon,
        names: [
          'dense',
          'color',
          'iconColor',
          'keepColor',
          'size',
          'padding',
          'margin',
        ],
      },
    },
  },
  {
    type: 'buttonToggle',
    icon: 'mdi-checkbox-multiple-blank',
    label: 'Buttons',
    schema: properties([
      commonProperties.state,
      Type.Object({
        modelValue: Type.String(),
        spread: Type.Boolean(),
        noCaps: Type.Boolean(),
        noWrap: Type.Boolean(),
        stack: Type.Boolean(),
        stretch: Type.Boolean(),
        clearable: Type.Boolean(),
        options: Type.Array(Type.Object({
          label: Type.String(),
          value: Type.String(),
          icon: Type.String({ icon: true }),
        }, { horizontalPopup: true })),
      }),
      commonProperties.style,
    ]),
    defaultValues: {
    },
    categories: {
      content: {
        icon: contentIcon,
        names: [
          'name',
          'modelValue',
          'clearable',
          'options',
          'disable',
          'readonly',
          'noCaps',
          'noWrap',
        ],
      },
      style: {
        icon: styleIcon,
        names: [
          'dense',
          'spread',
          'stack',
          'stretch',
          'padding',
          'margin',
        ],
      },
    },
  },
  {
    type: 'optionGroup',
    icon: 'mdi-radiobox-marked',
    label: 'Option Group',
    schema: properties([
      commonProperties.state,
      Type.Object({
        modelValue: Type.String(),
        color: Type.String({ color: true }),
        keepColor: Type.Boolean(),
        type: StringEnum(['radio', 'checkbox', 'toggle']),
        leftLabel: Type.Boolean(),
        inline: Type.Boolean(),
        options: Type.Array(Type.Object({
          label: Type.String(),
          value: Type.String(),
          disable: Type.Boolean(),
        }, { horizontalPopup: true })),
      }),
      commonProperties.style,
    ]),
    defaultValues: {
      type: 'radio',
    },
    editStyles: {
      minHeight: '40px',
    },
    categories: {
      content: {
        icon: contentIcon,
        names: [
          'name',
          'type',
          'modelValue',
          'options',
          'disable',
          'readonly',
        ],
      },
      style: {
        icon: styleIcon,
        names: [
          'dense',
          'color',
          'keepColor',
          'leftLabel',
          'inline',
          'padding',
          'margin',
        ],
      },
    },
  },
  {
    type: 'button',
    icon: 'mdi-button-pointer',
    label: 'Button',
    schema: properties([
      commonProperties.state,
      commonProperties.size,
      Type.Object({
        modelValue: Type.String(),
        label: Type.String(),
        color: Type.String({ color: true }),
        textColor: Type.String({ color: true }),
        to: Type.String(),
        target: Type.String(),
        replace: Type.Boolean(),
        loading: Type.Boolean(),
        noCaps: Type.Boolean(),
        noWrap: Type.Boolean(),
        align: StringEnum([
          'left',
          'right',
          'center',
          'around',
          'between',
          'spaced',
        ]),
        icon: Type.String({ icon: true }),
        stack: Type.Boolean(),
        stretch: Type.Boolean(),
        round: Type.Boolean(),
        rounded: Type.Boolean(),
        glossy: Type.Boolean(),
        outline: Type.Boolean(),
        flat: Type.Boolean(),
        push: Type.Boolean(),
        square: Type.Boolean(),
        unelevated: Type.Boolean(),
        fab: Type.Boolean(),
        fabMini: Type.Boolean(),
      }),
      commonProperties.style,
    ]),
    defaultValues: {
      align: 'center',
    },
    categories: {
      content: {
        icon: contentIcon,
        names: [
          'name',
          'modelValue',
          'disable',
          'readonly',
          'label',
          'icon',
          'align',
          'noCaps',
          'noWrap',
          'to',
          'target',
          'replace',
          'loading',
        ],
      },
      style: {
        icon: styleIcon,
        names: [
          'dense',
          'size',
          'color',
          'textColor',
          'stack',
          'stretch',
          'round',
          'rounded',
          'glossy',
          'outline',
          'flat',
          'push',
          'square',
          'unelevated',
          'fab',
          'fabMini',
          'padding',
          'margin',
        ],
      },
    },
  },
  {
    type: 'paragraph',
    icon: 'mdi-text-box-edit-outline',
    label: 'Paragraph',
    interactable: true,
    schema: properties([
      commonProperties.state,
      Type.Object({
        modelValue: Type.String(),
        placeholder: Type.String(),
        noRouteFullscreenExit: Type.Boolean(),
        square: Type.Boolean(),
        flat: Type.Boolean(),
        dense: Type.Boolean(),
        toolbarOutline: Type.Boolean(),
        toolbarPush: Type.Boolean(),
        toolbarRounded: Type.Boolean(),
        minHeight: Type.String(),
        maxHeight: Type.String(),
        definitions: Type.Array(Type.Object({
          commandName: Type.String(),
          label: Type.String(),
          tip: Type.String(),
          icon: Type.String({ icon: true }),
          key: Type.Number(),
        })),
        toolbar: Type.Array(Type.Array(Type.String())),
        toolbarColor: Type.String({ color: true }),
        toolbarTextColor: Type.String({ color: true }),
        toolbarToggleColor: Type.String({ color: true }),
        toolbarBg: Type.String({ color: true }),
      }),
      commonProperties.style,
    ]),
    defaultValues: {
      paragraphTag: 'div',
      modelValue: '',
      toolbar: [
        ['left', 'center', 'right', 'justify'],
        ['bold', 'italic', 'underline', 'strike'],
        ['undo', 'redo'],
      ],
    },
    categories: {
      content: {
        icon: contentIcon,
        names: [
          'name',
          'modelValue',
          'noRouteFullscreenExit',
          'placeholder',
          'minHeight',
          'maxHeight',
          'disable',
          'readonly',
        ],
      },
      toolbar: {
        icon: 'mdi-gesture-tap-button',
        names: [
          'definitions',
          'toolbar',
          'toolbarOutline',
          'toolbarPush',
          'toolbarRounded',
          'toolbarColor',
          'toolbarTextColor',
          'toolbarToggleColor',
          'toolbarBg',
        ],
      },
      style: {
        icon: styleIcon,
        names: [
          'square',
          'flat',
          'dense',
          'padding',
          'margin',
        ],
      },
    },
  },
  {
    type: 'date',
    icon: 'mdi-calendar',
    label: 'Date',
    schema: properties([
      commonProperties.state,
      Type.Object({
        modelValue: Type.String(),
        landscape: Type.Boolean(),
        outlined: Type.Boolean(),
        yearsInMonthView: Type.Boolean(),
        title: Type.String(),
        subTitle: Type.String(),
        todayBtn: Type.Boolean(),
        minimal: Type.Boolean(),
        mask: Type.String(),
        calendar: StringEnum(['gregorian', 'persian']),
        defaultYearMonth: Type.String(),
        defaultView: StringEnum(['Calendar', 'Months', 'Years']),
        firstDayOfWeek: Type.Number(),
        multiple: Type.Boolean(),
        range: Type.Boolean(),
        emitImmediately: Type.Boolean(),
        navigationMinYearMonth: Type.String(),
        navigationMaxYearMonth: Type.String(),
        noUnset: Type.Boolean(),
        color: Type.String({ color: true }),
        textColor: Type.String({ color: true }),
        square: Type.Boolean(),
        flat: Type.Boolean(),
        bordered: Type.Boolean(),
        hideBottomSpace: Type.Boolean(),
      }),
      commonProperties.style,
    ]),
    defaultValues: {
      dense: true,
      outlined: true,
      calendar: 'gregorian',
      defaultView: 'Calendar',
      hideBottomSpace: true,
    },
    categories: {
      content: {
        icon: contentIcon,
        names: [
          'name',
          'disable',
          'readonly',
          'title',
          'subTitle',
          'calendar',
          'defaultView',
          'defaultYearMonth',
          'yearsInMonthView',
          'firstDayOfWeek',
          'navigationMinYearMonth',
          'navigationMaxYearMonth',
        ],
      },
      model: {
        icon: modelIcon,
        names: [
          'modelValue',
          'emitImmediately',
          'noUnset',
          'mask',
          'multiple',
          'range',
        ],
      },
      style: {
        icon: styleIcon,
        names: [
          'dense',
          'todayBtn',
          'landscape',
          'outlined',
          'minimal',
          'color',
          'textColor',
          'square',
          'flat',
          'bordered',
          'hideBottomSpace',
          'padding',
          'margin',
        ],
      },
    },
  },
  {
    type: 'time',
    icon: 'mdi-clock-outline',
    label: 'Time',
    schema: properties([
      commonProperties.state,
      Type.Object({
        modelValue: Type.String(),
        landscape: Type.Boolean(),
        outlined: Type.Boolean(),
        withSeconds: Type.Boolean(),
        nowBtn: Type.Boolean(),
        mask: Type.String(),
        calendar: StringEnum(['gregorian', 'persian']),
        color: Type.String({ color: true }),
        textColor: Type.String({ color: true }),
        square: Type.Boolean(),
        flat: Type.Boolean(),
        bordered: Type.Boolean(),
        hideBottomSpace: Type.Boolean(),
      }),
      commonProperties.style,
    ]),
    defaultValues: {
      dense: true,
      outlined: true,
      calendar: 'gregorian',
      hideBottomSpace: true,
    },
    categories: {
      content: {
        icon: contentIcon,
        names: [
          'name',
          'modelValue',
          'mask',
          'disable',
          'readonly',
          'calendar',
        ],
      },
      style: {
        icon: styleIcon,
        names: [
          'dense',
          'nowBtn',
          'withSeconds',
          'landscape',
          'outlined',
          'minimal',
          'color',
          'textColor',
          'square',
          'flat',
          'bordered',
          'hideBottomSpace',
          'padding',
          'margin',
        ],
      },
    },
  },
  {
    type: 'select',
    icon: 'mdi-form-select',
    label: 'Select',
    schema: properties([
      commonProperties.state,
      Type.Object({
        modelValue: Type.String(),
        virtualScrollHorizontal: Type.Boolean(),
        loading: Type.Boolean(),
        clearable: Type.Boolean(),
        tableColspan: Type.Number(),
        noErrorIcon: Type.Boolean(),
        label: Type.String(),
        labelColor: Type.String({ color: true }),
        color: Type.String({ color: true }),
        bgColor: Type.String({ color: true }),
        stackLabel: Type.Boolean(),
        hint: Type.String(),
        hideHint: Type.Boolean(),
        prefix: Type.String(),
        suffix: Type.String(),
        multiple: Type.Boolean(),
        emitValue: Type.Boolean(),
        options: Type.Array(Type.Object({
          label: Type.String(),
          value: Type.String(),
        }, { horizontalPopup: true })),
        optionLabel: Type.String(),
        optionValue: Type.String(),
        optionDisable: Type.String(),
        optionsDense: Type.Boolean(),
        displayValue: Type.String(),
        hideSelected: Type.Boolean(),
        maxValues: Type.Number(),
        useChips: Type.Boolean(),
        useInput: Type.Boolean(),
        filled: Type.Boolean(),
        outlined: Type.Boolean(),
        square: Type.Boolean(),
        borderless: Type.Boolean(),
        standout: Type.Boolean(),
        rounded: Type.Boolean(),
        itemAligned: Type.Boolean(),
        hideBottomSpace: Type.Boolean(),
      }),
      commonProperties.style,
    ]),
    defaultValues: {
      dense: true,
      outlined: true,
      emitValue: true,
      optionLabel: 'label',
      optionValue: 'value',
      optionDisable: 'disable',
      optionsDense: true,
    },
    categories: {
      content: {
        icon: contentIcon,
        names: [
          'name',
          'disable',
          'readonly',
          'label',
          'prefix',
          'suffix',
          'hint',
          'tableColspan',
          'loading',
        ],
      },
      model: {
        icon: modelIcon,
        names: [
          'modelValue',
          'options',
          'optionLabel',
          'optionValue',
          'optionDisable',
          'multiple',
          'emitValue',
          'displayValue',
          'maxValues',
          'clearable',
          'useInput',
        ],
      },
      style: {
        icon: styleIcon,
        names: [
          'dense',
          'labelColor',
          'color',
          'bgColor',
          'stackLabel',
          'hideHint',
          'noErrorIcon',
          'hideSelected',
          'useChips',
          'filled',
          'outlined',
          'square',
          'borderless',
          'standout',
          'rounded',
          'itemAligned',
          'hideBottomSpace',
          'virtualScrollHorizontal',
          'padding',
          'margin',
        ],
      },
    },
  },
  {
    type: 'iconSelect',
    icon: 'mdi-form-select',
    label: 'Icon Select',
    schema: properties([
      commonProperties.state,
      Type.Object({
        modelValue: Type.String(),
        virtualScrollHorizontal: Type.Boolean(),
        loading: Type.Boolean(),
        clearable: Type.Boolean(),
        tableColspan: Type.Number(),
        noErrorIcon: Type.Boolean(),
        label: Type.String(),
        labelColor: Type.String({ color: true }),
        color: Type.String({ color: true }),
        bgColor: Type.String({ color: true }),
        stackLabel: Type.Boolean(),
        hint: Type.String(),
        hideHint: Type.Boolean(),
        prefix: Type.String(),
        suffix: Type.String(),
        multiple: Type.Boolean(),
        hideSelected: Type.Boolean(),
        maxValues: Type.Number(),
        useChips: Type.Boolean(),
        useInput: Type.Boolean(),
        filled: Type.Boolean(),
        outlined: Type.Boolean(),
        square: Type.Boolean(),
        borderless: Type.Boolean(),
        standout: Type.Boolean(),
        rounded: Type.Boolean(),
        itemAligned: Type.Boolean(),
        hideBottomSpace: Type.Boolean(),
      }),
      commonProperties.style,
    ]),
    defaultValues: {
      dense: true,
      outlined: true,
      emitValue: true,
      useInput: true,
    },
    categories: {
      content: {
        icon: contentIcon,
        names: [
          'name',
          'disable',
          'readonly',
          'label',
          'hint',
          'prefix',
          'suffix',
          'tableColspan',
          'loading',
        ],
      },
      model: {
        icon: modelIcon,
        names: [
          'modelValue',
          'clearable',
          'multiple',
          'emitValue',
          'displayValue',
          'maxValues',
          'useInput',
          'optionLabel',
          'optionValue',
          'optionDisable',
          'options',
        ],
      },
      style: {
        icon: styleIcon,
        names: [
          'dense',
          'labelColor',
          'color',
          'bgColor',
          'stackLabel',
          'hideHint',
          'noErrorIcon',
          'hideSelected',
          'useChips',
          'filled',
          'outlined',
          'square',
          'borderless',
          'standout',
          'rounded',
          'itemAligned',
          'hideBottomSpace',
          'virtualScrollHorizontal',
          'padding',
          'margin',
        ],
      },
    },
  },
  {
    type: 'chip',
    icon: 'mdi-square-rounded',
    label: 'Chip',
    schema: properties([
      commonProperties.state,
      commonProperties.size,
      Type.Object({
        modelValue: Type.String(),
        selected: Type.Boolean(),
        label: Type.String(),
        icon: Type.String({ icon: true }),
        color: Type.String({ color: true }),
        textColor: Type.String({ color: true }),
        clickable: Type.Boolean(),
        removable: Type.Boolean(),
        square: Type.Boolean(),
        outline: Type.Boolean(),
      }),
      commonProperties.style,
    ]),
    defaultValues: {
    },
    categories: {
      content: {
        icon: contentIcon,
        names: [
          'name',
          'modelValue',
          'disable',
          'readonly',
          'label',
          'icon',
          'selected',
          'clickable',
          'removable',
        ],
      },
      style: {
        icon: styleIcon,
        names: [
          'dense',
          'size',
          'color',
          'textColor',
          'square',
          'outline',
          'padding',
          'margin',
        ],
      },
    },
  },
  {
    type: 'icon',
    icon: 'mdi-cube-outline',
    label: 'Icon',
    schema: properties([
      commonProperties.state,
      commonProperties.size,
      Type.Object({
        name: Type.String({ icon: true }),
        left: Type.Boolean(),
        right: Type.Boolean(),
        color: Type.String({ color: true }),
      }),
      commonProperties.style,
    ]),
    defaultValues: {
    },
    categories: {
      content: {
        icon: contentIcon,
        names: [
          'name',
          'disable',
          'readonly',
        ],
      },
      style: {
        icon: styleIcon,
        names: [
          'dense',
          'size',
          'color',
          'left',
          'right',
          'padding',
          'margin',
        ],
      },
    },
  },
  {
    type: 'img',
    icon: 'mdi-image',
    label: 'Image',
    schema: properties([
      commonProperties.state,
      commonProperties.size,
      Type.Object({
        src: Type.String(),
        srcset: Type.String(),
        alt: Type.String(),
        sizes: Type.String(),
        placeholderSrc: Type.String(),
        loading: StringEnum(['eager', 'lazy']),
        crossorigin: StringEnum(['anonymous', 'use-credentials']),
        decoding: StringEnum(['sync', 'async', 'auto']),
        reffererpolicy: StringEnum([
          'no-referrer',
          'no-referrer-when-downgrade',
          'origin',
          'origin-when-cross-origins',
          'name-origin',
          'strict-origin',
          'strict-origin-when-cross-origin',
          'unsafe-url',
        ]),
        fetchpriority: StringEnum(['high', 'low', 'auto']),
        draggable: Type.Boolean(),
        noSpinner: Type.Boolean(),
        noNativeMenu: Type.Boolean(),
        noTransition: Type.Boolean(),
        ratio: Type.String(),
        position: Type.String(),
        width: Type.String(),
        height: Type.String(),
        fit: StringEnum([
          'cover',
          'fill',
          'contain',
          'none',
          'scale-down',
        ]),
        spinnerColor: Type.String({ color: true }),
        spinnerSize: sizeString,
      }),
      commonProperties.style,
    ]),
    defaultValues: {
      loading: 'eager',
      decoding: 'async',
      fetchpriority: 'auto',
      referrerpolicy: 'strict-origin-when-cross-origin',
      fit: 'cover',
    },
    categories: {
      content: {
        icon: contentIcon,
        names: [
          'name',
          'disable',
          'readonly',
          'src',
          'srcset',
          'alt',
          'placeholderSrc',
          'loading',
          'crossorigin',
          'decoding',
          'reffererpolicy',
          'fetchpriority',
          'draggable',
        ],
      },
      style: {
        icon: styleIcon,
        names: [
          'dense',
          'size',
          'width',
          'height',
          'fit',
          'position',
          'ratio',
          'sizes',
          'noSpinner',
          'noNativeMenu',
          'noTransition',
          'spinnerColor',
          'spinnerSize',
          'padding',
          'margin',
        ],
      },
    },
  },
  {
    type: 'video',
    icon: 'mdi-movie-open',
    label: 'Video',
    schema: properties([
      Type.Object({
        src: Type.String(),
        title: Type.String(),
        ratio: Type.String(),
        loading: StringEnum(['eager', 'lazy']),
        fetchpriority: StringEnum(['high', 'low', 'auto']),
        reffererpolicy: StringEnum([
          'no-referrer',
          'no-referrer-when-downgrade',
          'origin',
          'origin-when-cross-origins',
          'name-origin',
          'strict-origin',
          'strict-origin-when-cross-origin',
          'unsafe-url',
        ]),
      }),
      Type.Omit(commonProperties.style, ['dense']),
    ]),
    defaultValues: {
      loading: 'eager',
      fetchpriority: 'auto',
      referrerpolicy: 'strict-origin-when-cross-origin',
    },
    categories: {
      content: {
        icon: contentIcon,
        names: [
          'name',
          'title',
          'src',
          'fetchpriority',
          'reffererpolicy',
          'loading',
        ],
      },
      style: {
        icon: styleIcon,
        names: [
          'ratio',
          'padding',
          'margin',
        ],
      },
    },
  },
  {
    type: 'knob',
    icon: 'mdi-knob',
    label: 'Knob',
    schema: properties([
      commonProperties.state,
      commonProperties.size,
      Type.Object({
        modelValue: Type.Number({ min: 0, max: 360 }),
        angle: Type.Number({ min: 0, max: 360 }),
        reverse: Type.Boolean(),
        instantFeedback: Type.Boolean(),
        showValue: Type.Boolean(),
        min: Type.Number(),
        max: Type.Number(),
        innerMin: Type.Number(),
        innerMax: Type.Number(),
        step: Type.Number(),
        fontSize: Type.String(),
        color: Type.String({ color: true }),
        centerColor: Type.String({ color: true }),
        trackColor: Type.String({ color: true }),
        thickness: Type.Number(),
      }),
      commonProperties.style,
    ]),
    defaultValues: {
    },
    categories: {
      content: {
        icon: contentIcon,
        names: [
          'name',
          'disable',
          'readonly',
          'angle',
          'instantFeedback',
          'showValue',
        ],
      },
      model: {
        icon: modelIcon,
        names: [
          'modelValue',
          'reverse',
          'min',
          'max',
          'innerMin',
          'innerMax',
          'step',
        ],
      },
      style: {
        icon: styleIcon,
        names: [
          'dense',
          'size',
          'color',
          'centerColor',
          'trackColor',
          'fontSize',
          'thickness',
          'padding',
          'margin',
        ],
      },
    },
  },
  {
    type: 'progress',
    icon: 'mdi-progress-helper',
    label: 'Progress',
    schema: properties([
      commonProperties.state,
      commonProperties.size,
      Type.Object({
        modelValue: Type.Number({ min: 0, max: 360 }),
        angle: Type.Number({ min: 0, max: 360 }),
        indeterminate: Type.Boolean(),
        reverse: Type.Boolean(),
        rounded: Type.Boolean(),
        instantFeedback: Type.Boolean(),
        showValue: Type.Boolean(),
        min: Type.Number(),
        max: Type.Number(),
        fontSize: Type.String(),
        color: Type.String({ color: true }),
        centerColor: Type.String({ color: true }),
        trackColor: Type.String({ color: true }),
        thickness: Type.Number({ step: 0.1 }),
        animationSpeed: Type.Number(),
      }),
      commonProperties.style,
    ]),
    defaultValues: {
      color: 'primary',
      indeterminate: true,
      thickness: 0.2,
    },
    categories: {
      content: {
        icon: contentIcon,
        names: [
          'name',
          'disable',
          'readonly',
          'angle',
          'instantFeedback',
          'showValue',
        ],
      },
      model: {
        icon: modelIcon,
        names: [
          'modelValue',
          'reverse',
          'indeterminate',
          'min',
          'max',
        ],
      },
      style: {
        icon: styleIcon,
        names: [
          'dense',
          'size',
          'color',
          'centerColor',
          'trackColor',
          'thickness',
          'fontSize',
          'animationSpeed',
          'padding',
          'margin',
        ],
      },
    },
  },
  {
    type: 'spinner',
    icon: 'mdi-vanish',
    label: 'Spinner',
    schema: properties([
      commonProperties.size,
      Type.Object({
        color: Type.String({ color: true }),
        thickness: Type.Number(),
      }),
      commonProperties.style,
    ]),
    defaultValues: {
      color: 'primary',
      thickness: 5,
    },
    categories: {
      content: {
        icon: contentIcon,
        names: [
          'name',
        ],
      },
      style: {
        icon: styleIcon,
        names: [
          'dense',
          'size',
          'color',
          'thickness',
          'padding',
          'margin',
        ],
      },
    },
  },
  {
    type: 'color',
    icon: 'mdi-eyedropper-variant',
    label: 'Color',
    schema: properties([
      commonProperties.state,
      Type.Object({
        modelValue: Type.String(),
        defaultValue: Type.String(),
        formatModel: StringEnum(['auto', 'hex', 'rgb', 'hexa', 'rgba']),
        defaultView: StringEnum(['spectrum', 'tune', 'palette']),
        noHeader: Type.Boolean(),
        noHeaderTabs: Type.Boolean(),
        noFooter: Type.Boolean(),
        square: Type.Boolean(),
        flat: Type.Boolean(),
        bordered: Type.Boolean(),
        hideBottomSpace: Type.Boolean(),
      }),
      commonProperties.style,
    ]),
    defaultValues: {
      dense: true,
      outlined: true,
      defaultView: 'palette',
      formatModel: 'auto',
    },
    categories: {
      content: {
        icon: contentIcon,
        names: [
          'name',
          'modelValue',
          'defaultValue',
          'formatModel',
          'disable',
          'readonly',
          'defaultView',
        ],
      },
      style: {
        icon: styleIcon,
        names: [
          'dense',
          'noHeader',
          'noHeaderTabs',
          'noFooter',
          'square',
          'flat',
          'bordered',
          'hideBottomSpace',
          'padding',
          'margin',
        ],
      },
    },
  },
  {
    type: 'slider',
    icon: 'mdi-tune-variant',
    label: 'Slider',
    schema: properties([
      commonProperties.state,
      Type.Object({
        modelValue: Type.Number(),
        label: Type.String(),
        min: Type.Number(),
        max: Type.Number(),
        innerMin: Type.Number(),
        innerMax: Type.Number(),
        step: Type.Number(),
        snap: Type.Boolean(),
        reverse: Type.Boolean(),
        vertical: Type.Boolean(),
        labelAlways: Type.Boolean(),
        switchLabelSide: Type.Boolean(),
        switchMarkerLabelSide: Type.Boolean(),
        thumbSize: sizeString,
        trackSize: sizeString,
        markers: Type.Union([Type.Boolean(), Type.Number()]),
        markerLabels: Type.Boolean(),
        color: Type.String({ color: true }),
        labelColor: Type.String({ color: true }),
        labelTextColor: Type.String({ color: true }),
        thumbColor: Type.String({ color: true }),
        innerTrackColor: Type.String({ color: true }),
        selectionColor: Type.String({ color: true }),
      }),
      commonProperties.style,
    ]),
    defaultValues: {
      step: 1,
      snap: true,
      max: 10,
      innerMax: 10,
    },
    categories: {
      content: {
        icon: contentIcon,
        names: [
          'name',
          'disable',
          'readonly',
          'label',
          'markers',
        ],
      },
      model: {
        icon: modelIcon,
        names: [
          'modelValue',
          'min',
          'max',
          'innerMin',
          'innerMax',
          'step',
          'snap',
          'reverse',
        ],
      },
      style: {
        icon: styleIcon,
        names: [
          'dense',
          'vertical',
          'labelAlways',
          'switchLabelSide',
          'switchMarkerLabelSide',
          'thumbSize',
          'trackSize',
          'markerLabels',
          'labelColor',
          'labelTextColor',
          'thumbColor',
          'innerTrackColor',
          'selectionColor',
          'padding',
          'margin',
        ],
      },
    },
  },
  {
    type: 'range',
    icon: 'mdi-arrow-left-right',
    label: 'Range',
    schema: properties([
      commonProperties.state,
      Type.Object({
        modelValue: Type.String(),
        min: Type.Number(),
        max: Type.Number(),
        innerMin: Type.Number(),
        innerMax: Type.Number(),
        step: Type.Number(),
        snap: Type.Boolean(),
        labelAlways: Type.Boolean(),
        reverse: Type.Boolean(),
        vertical: Type.Boolean(),
        markers: Type.Union([Type.Boolean(), Type.Number()]),
        markerLabels: Type.Boolean(),
        dragRange: Type.Boolean(),
        dragOnlyRange: Type.Boolean(),
        leftLabelValue: Type.String(),
        rightLabelValue: Type.String(),
        switchLabelSide: Type.Boolean(),
        switchMarkerLabelSide: Type.Boolean(),
        thumbSize: sizeString,
        trackSize: sizeString,
        labelColor: Type.String({ color: true }),
        labelTextColor: Type.String({ color: true }),
        trackColor: Type.String({ color: true }),
        thumbColor: Type.String({ color: true }),
        selectionColor: Type.String({ color: true }),
        leftLabelColor: Type.String({ color: true }),
        leftLabelTextColor: Type.String({ color: true }),
        rightLabelColor: Type.String({ color: true }),
        rightLabelTextColor: Type.String({ color: true }),
        leftThumbColor: Type.String({ color: true }),
        rightThumbColor: Type.String({ color: true }),
      }),
      commonProperties.style,
    ]),
    defaultValues: {
      step: 1,
      snap: true,
      max: 10,
      innerMax: 10,
      labelAlways: true,
    },
    categories: {
      content: {
        icon: contentIcon,
        names: [
          'name',
          'disable',
          'readonly',
          'reverse',
          'markers',
        ],
      },
      model: {
        icon: modelIcon,
        names: [
          'modelValue',
          'min',
          'max',
          'innerMin',
          'innerMax',
          'step',
          'snap',
        ],
      },
      style: {
        icon: styleIcon,
        names: [
          'dense',
          'labelColor',
          'labelTextColor',
          'leftLabelColor',
          'leftLabelTextColor',
          'rightLabelColor',
          'rightLabelTextColor',
          'labelAlways',
          'switchLabelSide',
          'switchMarkerLabelSide',
          'vertical',
          'markerLabels',
          'dragRange',
          'dragOnlyRange',
          'selectionColor',
          'trackSize',
          'trackColor',
          'thumbSize',
          'thumbColor',
          'leftThumbColor',
          'rightThumbColor',
          'padding',
          'margin',
        ],
      },
    },
  },
  {
    type: 'rating',
    icon: 'mdi-star',
    label: 'Rating',
    schema: properties([
      commonProperties.state,
      commonProperties.size,
      Type.Object({
        modelValue: Type.Number(),
        icon: Type.String({ icon: true }),
        iconSelected: Type.String({ icon: true }),
        iconHalf: Type.String({ icon: true }),
        max: Type.Number(),
        noReset: Type.Boolean(),
        noDimming: Type.Boolean(),
        color: Type.String({ color: true }),
        colorSelected: Type.String({ color: true }),
        colorHalf: Type.String({ color: true }),
      }),
      Type.Omit(commonProperties.style, ['dense']),
    ]),
    defaultValues: {
      dense: true,
      icon: 'mdi-star-outline',
      iconSelected: 'mdi-star',
      iconHalf: 'mdi-star-half-full',
      max: 5,
      size: 'sm',
    },
    categories: {
      content: {
        icon: contentIcon,
        names: [
          'name',
          'modelValue',
          'max',
          'disable',
          'readonly',
          'icon',
          'iconSelected',
          'iconHalf',
        ],
      },
      style: {
        icon: styleIcon,
        names: [
          'size',
          'color',
          'colorSelected',
          'colorHalf',
          'noReset',
          'noDimming',
          'padding',
          'margin',
        ],
      },
    },
  },
  {
    type: 'separator',
    icon: 'mdi-minus',
    label: 'Separator',
    schema: properties([
      Type.Object({
        spaced: Type.Boolean(),
        inset: Type.Boolean(),
        vertical: Type.Boolean(),
        color: Type.String({ color: true }),
      }),
      Type.Omit(commonProperties.style, ['dense']),
    ]),
    defaultValues: {
    },
    categories: {
      content: {
        icon: contentIcon,
        names: [
          'name',
        ],
      },
      style: {
        icon: styleIcon,
        names: [
          'color',
          'vertical',
          'spaced',
          'inset',
          'padding',
          'margin',
        ],
      },
    },
  },
  {
    type: 'skeleton',
    icon: 'mdi-timer-sand',
    label: 'Skeleton',
    schema: properties([
      commonProperties.state,
      commonProperties.size,
      Type.Object({
        type: StringEnum([
          'rect',
          'text',
          'circle',
          'QBtn',
          'QBadge',
          'QChip',
          'QToolbar',
          'QCheckbox',
          'QRadio',
          'QToggle',
          'QSlider',
          'QRange',
          'QInput',
          'QAvatar',
        ]),
        animation: StringEnum([
          'wave',
          'pulse',
          'pulse-x',
          'pulse-y',
          'fade',
          'blink',
          'none',
        ]),
        animationSpeed: Type.Number(),
        square: Type.Boolean(),
        bordered: Type.Boolean(),
        width: Type.String(),
        height: Type.String(),
      }),
      Type.Omit(commonProperties.style, ['dense']),
    ]),
    defaultValues: {
      type: 'rect',
    },
    categories: {
      content: {
        icon: contentIcon,
        names: [
          'name',
          'type',
          'disable',
          'readonly',
        ],
      },
      style: {
        icon: styleIcon,
        names: [
          'size',
          'width',
          'height',
          'animation',
          'animationSpeed',
          'square',
          'bordered',
          'padding',
          'margin',
        ],
      },
    },
  },
  {
    type: 'space',
    icon: 'mdi-keyboard-space',
    label: 'Spacer',
    schema: properties([]),
    defaultValues: {
    },
  },
  {
    type: 'table',
    icon: 'mdi-table',
    label: 'Table',
    schema: properties([
      commonProperties.state,
      Type.Object({
        noRouteFullscreenExit: Type.Boolean(),
        grid: Type.Boolean(),
        gridHeader: Type.Boolean(),
        loading: Type.Boolean(),
        columns: Type.Array(Type.Object({
          name: Type.String(),
          label: Type.String(),
          field: Type.String(),
          required: Type.Boolean(),
          align: Type.String({
            options: [
              { value: 'left', icon: 'mdi-format-align-left' },
              { value: 'center', icon: 'mdi-format-align-center' },
              { value: 'right', icon: 'mdi-format-align-right' },
            ],
            toggles: true,
          }),
          sortable: Type.Boolean(),
          sortOrder: Type.String({
            options: [
              { value: 'ad', icon: 'mdi-sort-alphabetical-ascending' },
              { value: 'da', icon: 'mdi-sort-alphabetical-descending' },
            ],
            toggles: true,
          }),
        }, { horizontalPopup: true })),
        visibleColumns: Type.Array(Type.String()),
        title: Type.String(),
        hideHeader: Type.Boolean(),
        hideBottom: Type.Boolean(),
        hideSelectedBanner: Type.Boolean(),
        hideNoData: Type.Boolean(),
        hidePagination: Type.Boolean(),
        separator: StringEnum(['horizontal', 'vertical', 'cell', 'none']),
        wrapCells: Type.Boolean(),
        noDataLabel: Type.String(),
        noResultsLabel: Type.String(),
        loadingLabel: Type.String(),
        expanded: Type.Array(Type.String()),
        filter: Type.String(),
        rows: Type.Array(undefined, { json: true }),
        rowKey: Type.String(),
        rowsPerPageLabel: Type.String(),
        pagination: Type.Object({
          sortBy: Type.String(),
          descending: Type.Boolean(),
          page: Type.Number(),
          rowsPerPage: Type.Number(),
          rowsNumber: Type.Number(),
        }),
        rowsPerPageOptions: Type.Array(Type.Number()),
        selection: StringEnum(['single', 'multiple', 'none']),
        binaryStateSort: Type.Boolean(),
        columnSortOrder: Type.String(),
        color: Type.String({ color: true }),
        flat: Type.Boolean(),
        bordered: Type.Boolean(),
        square: Type.Boolean(),
        virtualScroll: Type.Boolean(),
        virtualScrollSliceSize: Type.Number(),
        virtualScrollSliceRatioBefore: Type.Number(),
        virtualScrollSliceRatioAfter: Type.Number(),
        virtualScrollItemSize: Type.Number(),
        virtualScrollStickySizeStart: Type.Number(),
        virtualScrollStickySizeEnd: Type.Number(),
        tableColspan: Type.Number(),
        tableId: Type.String({ objectid: true, tableid: true }),
        query: Type.Object({}, { query: true }),
      }),
      commonProperties.style,
    ]),
    defaultValues: {
      separator: 'horizontal',
      selection: 'none',
      virtualScrollSliceSize: 30,
      virtualScrollSliceRatioBefore: 1,
      virtualScrollSliceRatioAfter: 1,
      virtualScrollItemSize: 48,
      columns: [
        {
          name: 'name',
          label: 'Name',
          field: 'name',
          align: 'left',
        },
        {
          name: 'age',
          label: 'Age',
          field: 'age',
          align: 'left',
        },
      ],
      visibleColumns: ['name', 'age'],
      rows: [
        { name: 'Alain', age: 49 },
      ],
    },
    categories: {
      content: {
        icon: contentIcon,
        names: [
          'name',
          'title',
          'rows',
          'rowKey',
          'columns',
          'visibleColumns',
          'tableId',
          'query',
          'selection',
          'filter',
          'noDataLabel',
          'noResultsLabel',
          'rowsPerPageLabel',
          'rowsPerPageOptions',
          'pagination',
          'loading',
          'loadingLabel',
          'binaryStateSort',
          'columnSortOrder',
          'virtualScroll',
          'virtualScrollSliceSize',
          'virtualScrollSliceRatioBefore',
          'virtualScrollSliceRatioAfter',
          'virtualScrollItemSize',
          'virtualScrollStickySizeStart',
          'virtualScrollStickySizeEnd',
          'tableColspan',
        ],
      },
      style: {
        icon: styleIcon,
        names: [
          'dense',
          'disabled',
          'readonly',
          'color',
          'separator',
          'expanded',
          'flat',
          'bordered',
          'square',
          'noRouteFullscreenExit',
          'gridHeader',
          'hideHeader',
          'hideBottom',
          'hideSelectedBanner',
          'hideNoData',
          'hidePagination',
          'grid',
          'wrapCells',
          'padding',
          'margin',
        ],
      },
    },
  },
] as TFormComponent[]

const newNameForField = (type: string, fields: AnyData[]): string => {
  let index = 1
  let newName = `${startCase(type)}${index}`
  let field = fields.find((f) => f.name === newName)
  while (field) {
    index += 1
    newName = `${startCase(type)}${index}`
    // eslint-disable-next-line @typescript-eslint/no-loop-func
    field = fields.find((f) => f.name === newName)
  }
  return newName
}

const flattenFields = (fields: TFormField[]): (AnyData)[] => {
  const flattended = []

  const flatten = (list: AnyData[]): void => {
    list.forEach((f) => {
      flattended.push(f)

      // eslint-disable-next-line no-underscore-dangle
      const flds = f._fields
      // eslint-disable-next-line no-underscore-dangle
      const cols = f._columns

      if (cols) {
        flatten(cols)
      }
      if (flds) {
        flatten(flds)
      }
    })
  }

  flatten(fields)

  return flattended
}

export default () => ({
  createFormField: (component: TFormComponent, fields: TFormField[]): TFormField => ({
    _id: hexObjectId(),
    _type: component.type,
    _columns: component.type === 'row' ? [] : undefined,
    _fields: component.type === 'col' ? [] : undefined,
    ...Object.keys(component.schema?.properties || {})
      .reduce((acc, k) => (
        { ...acc, [k]: defaultValueForSchema(component.schema.properties[k]) }
      ), {}),
    ...(component.defaultValues || {}),
    name: newNameForField(component.type, flattenFields(fields)),
  }),

  flattenFields,

  fieldBinds: (field: TFormField, schema: TSchema): AnyData => {
    const fieldsToOmit = [
      '_id',
      '_type',
      '_fields',
      '_columns',
      'modelValue',
    ]

    const scanSchema = (s: TSchema): void => {
      Object.keys(s.properties).forEach((k) => {
        if (s.properties[k].style) {
          fieldsToOmit.push(k)
        } else if (s.properties[k].type === 'object') {
          scanSchema(s.properties[k])
        }
      })
    }

    scanSchema(schema)

    return omit(field, fieldsToOmit)
  },

  componentForType,

  components,
})
